#include<iostream>
#include<vector>
#include<cstring>
#include<cstdio>
#define MAX 10000
//#define pc(x) putchar_unlocked(x);


using namespace std;
vector<int> primes;
void prime_sieve()
{
	bool is_prime[10001];
	memset(is_prime, 1, 10001);
	for (int i = 3; i*i <= MAX; i++)
		if (is_prime[i])
			for (int j = i*i; j <= MAX; j += 2*i)
				is_prime[j] = 0;
	primes.push_back(2);
	for (int i = 3; i <= MAX; i += 2)
		if (is_prime[i]) primes.push_back(i);
}

//inline void writeInt (int n)
//{
//    int N = n, rev, count = 0;
//    rev = N;
//    if (N == 0) { pc('0'); pc('\n'); return ;}
//    while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
//    rev = 0;
//    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
//    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
//    while (count--) pc('0');
//}

int power(int i, int n)
{
	int count = 0, temp = i;
	while (i <= n)
	{
		count += n / i;
		i *= temp;
	}
	return count;
}

int main()
{
	int n;
	prime_sieve();
	cin >> n;

	for (int i = 0;; )
	{
		printf("%d^%d",primes[i], power(primes[i], n));
		//writeInt(primes[i]); pc('^'); writeInt(power(primes[i],n));
		if (++i < primes.size())
		{
			if (primes[i] >= n) break;
			else 
				printf( " * ");
			    // {pc(' '); pc('*'); pc(' ');}
		}
		else break;
	}
	cin >> n;
	return 0;
}
